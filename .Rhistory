mutate(
# Add dilutions if applicable.
Dilutions = if (dilution_bool) -log10(as.numeric(dilutions)),
# Maxpoint Ratio
MPR = quicR::calculate_MPR(df_norm, start_col=3, data_is_norm=TRUE),
# Max Slope
MS  = quicR::calculate_MS(df_norm, start_col=3),
# Time to Threshold
TtT = quicR::calculate_TtT(df_norm, threshold=threshold, start_col=3, run_time=hours)
) %>%
mutate(
# Rate of Amyloid Formation
RAF = ifelse(TtT == hours, 0, 1 / (3600 * TtT)),
# Crossed threshold?
crossed = TtT != hours
) %>%
# Order the data frame based on Sample_ID.
arrange(Sample_ID)
# Create a summary data frame.
summary <- (
if (dilution_bool) {
summary <- df_analyzed %>%
group_by(Sample_ID, Dilutions)
} else {
summary <- df_analyzed %>%
group_by(Sample_ID)
}
) %>%
summarise(
reps      = n(),
mean_TtT  = mean(TtT),
sd_TtT    = sd(TtT),
mean_RAF  = mean(RAF),
sd_RAF    = sd(RAF),
mean_MPR  = mean(MPR),
sd_MPR    = sd(MPR),
mean_MS   = mean(MS),
sd_MS     = sd(MS),
thres_pos = sum(crossed) / n() > 0.5
)
metrics <- c("MPR", "MS")
for (metric in metrics) {
# Create a dataframe of the individual comparisons.
comps <- LSD.test( # Perform the post-hoc multiple comparisons test.
# Create the statistical model using ANOVA.
aov(as.formula(paste0(metric, " ~ ", "Sample_ID")),
data = df_analyzed),
"Sample_ID",  p.adj = "holm", group = F
)[["comparison"]]
# Initialize columns which will hold unique IDs for each sample compared.
comps <- comps %>%
cbind(
rownames(comps) %>%
strsplit(" - ") %>%
as.data.frame() %>%
t() %>%
as.data.frame()
) %>%
select(-difference) %>%
# Remove all comparisons that are not against "N".
subset(V1 == "N" | V2 == "N") %>%
rename(
"{metric}_pvalue" := pvalue,
"{metric}_significance" := signif.
) %>%
mutate(
V1 = replace(V1, V1 == "N", NA),
V2 = replace(V2, V2 == "N", NA)
) %>%
unite(
Sample_ID,
c("V1", "V2"),
sep = "",
na.rm = T
) %>%
rbind(c(NA, NA, "N"))
summary <- left_join(summary, comps)
}
summary <- summary %>%
mutate(Positive = thres_pos & MPR_pvalue <= 0.05 & MS_pvalue <= 0.05)
# Initialize the workbook for Excel.
wb <- createWorkbook()
# Add the sheets.
addWorksheet(wb, "Total")
addWorksheet(wb, "Summary")
# Write the "summary" df to the "Summary" sheet.
writeData(wb, "Total", df_analyzed)
writeData(wb, "Summary", summary)
library(openxlsx)
# Initialize the workbook for Excel.
wb <- createWorkbook()
# Add the sheets.
addWorksheet(wb, "Total")
addWorksheet(wb, "Summary")
# Write the "summary" df to the "Summary" sheet.
writeData(wb, "Total", df_analyzed)
writeData(wb, "Summary", summary)
# Save the Excel file.
saveWorkbook(wb, "summary.xlsx", overwrite = TRUE)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
aes(fill = Dilutions),
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool == TRUE) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
aes(fill = Dilutions),
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
aes(fill = ifelse(dilution_bool, Dilutions, Sample_ID)),
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
aes(fill = ifelse(dilution_bool, Dilutions, NA)),
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
View(df_analyzed)
source("~/RTQ_analysis/calculate_metrics.R", echo=TRUE)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
ggsave("summary.png", width = 4000, height = 2500, units = "px")
# Create a summary data frame.
summary <- (
if (dilution_bool) {
summary <- df_analyzed %>%
group_by(Sample_ID, Dilutions)
} else {
summary <- df_analyzed %>%
group_by(Sample_ID)
}
) %>%
summarise(
reps      = n(),
mean_TtT  = mean(TtT),
sd_TtT    = sd(TtT),
mean_RAF  = mean(RAF),
sd_RAF    = sd(RAF),
mean_MPR  = mean(MPR),
sd_MPR    = sd(MPR),
mean_MS   = mean(MS),
sd_MS     = sd(MS),
thres_pos = sum(crossed) / n() > 0.5
)
metrics <- c("MPR", "MS")
for (metric in metrics) {
# Create a dataframe of the individual comparisons.
comps <- LSD.test( # Perform the post-hoc multiple comparisons test.
# Create the statistical model using ANOVA.
aov(as.formula(paste0(metric, " ~ ", "Sample_ID")),
data = df_analyzed),
"Sample_ID",  p.adj = "holm", group = F
)[["comparison"]]
# Initialize columns which will hold unique IDs for each sample compared.
comps <- comps %>%
cbind(
rownames(comps) %>%
strsplit(" - ") %>%
as.data.frame() %>%
t() %>%
as.data.frame()
) %>%
select(-difference) %>%
# Remove all comparisons that are not against "N".
subset(V1 == "N" | V2 == "N") %>%
rename(
"{metric}_pvalue" := pvalue,
"{metric}_significance" := signif.
) %>%
mutate(
V1 = replace(V1, V1 == "N", NA),
V2 = replace(V2, V2 == "N", NA)
) %>%
unite(
Sample_ID,
c("V1", "V2"),
sep = "",
na.rm = T
) %>%
rbind(c(NA, NA, "N"))
summary <- left_join(summary, comps)
}
summary <- summary %>%
mutate(Positive = thres_pos & MPR_pvalue <= 0.05 & MS_pvalue <= 0.05)
View(summary)
summary <- summary %>%
mutate(Positive = thres_pos == TRUE & MPR_pvalue <= 0.05 & MS_pvalue <= 0.05)
summary <- summary %>%
mutate(Positive = MPR_pvalue <= 0.05 & MS_pvalue <= 0.05)
summary <- summary %>%
mutate(Positive = MPR_pvalue <= 0.05)
summary <- summary %>%
mutate(
Positive = (thres_pos) & (MPR_pvalue <= 0.05) & (MS_pvalue <= 0.05)
)
Positive = ((MS_pvalue <= 0.05)
summary <- summary %>%
mutate(
Positive = (MS_pvalue <= 0.05)
)
1e-4 < 0.05
summary <- summary %>%
mutate(
MPR_pvalue = as.numeric(MPR_pvalue),
MS_pvalue = as.numeric(MS_pvalue),
Positive = (thres_pos) & (MPR_pvalue <= 0.05) & (MS_pvalue <= 0.05)
)
summary <- summary %>%
mutate(
MPR_pvalue = as.numeric(MPR_pvalue),
MS_pvalue = as.numeric(MS_pvalue),
Positive = thres_pos & MPR_pvalue <= 0.05 & MS_pvalue <= 0.05
)
# Initialize the workbook for Excel.
wb <- createWorkbook()
# Add the sheets.
addWorksheet(wb, "Total")
addWorksheet(wb, "Summary")
# Write the "summary" df to the "Summary" sheet.
writeData(wb, "Total", df_analyzed)
writeData(wb, "Summary", summary)
# Save the Excel file.
saveWorkbook(wb, "summary.xlsx", overwrite = TRUE)
# Save the Excel file.
saveWorkbook(wb, "summary.xlsx", overwrite = TRUE)
df_analyzed %>%
select(-crossed) %>%
{
if (dilution_bool) {
reshape2::melt(., id.vars = c("Sample_ID", "Dilutions")) %>%
mutate(Dilutions = as.factor(desc(Dilutions))) %>%
ggplot(aes(Sample_ID, value, fill = Dilutions))
} else {
reshape2::melt(., id.vars = "Sample_ID") %>%
ggplot(aes(Sample_ID, value))
}
} +
geom_boxplot(
outlier.shape = NA,
position = "dodge"
) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.5,
position = "dodge",
stackratio = 0.5
) +
facet_wrap(
vars(variable),
scales = "free",
labeller = as_labeller(
c(
MPR = "MPR (Max RFU / Initial RFU)",
RAF = "RAF (1/s)",
MS  = "Max Slope (RFU/s)",
TtT = "Time to Threshold (h)"
)
),
strip.position = "left"
) +
ylim(0, NA) +
xlab(NULL) +
ylab(NULL) +
theme(
axis.line = element_line(colour = "black"),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.background = element_blank(),
panel.grid = element_line(colour = "lightgrey"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_blank(),
strip.placement = "outside"
)
ggsave("summary.png", width = 4000, height = 2500, units = "px")
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/calculate_metrics.R", echo=TRUE)
setwd("~/RT-QuIC Data/20240827_pr2_RL_practiceNano")
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/calculate_metrics.R", echo=TRUE)
setwd("~/RT-QuIC Data/20240829_pr1_GR_feces n swabs")
source("~/RTQ_analysis/plate_view_export.R", echo=TRUE)
source("~/RTQ_analysis/calculate_metrics.R", echo=TRUE)
source("~/RTQ_analysis/calculate_metrics.R", echo=TRUE)
source("~/RTQ_analysis/BMG_format.R", echo=TRUE)
source("~/RTQ_analysis/BMG_format.R", echo=TRUE)
