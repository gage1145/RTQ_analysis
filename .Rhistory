library(bslib)
shiny::runApp()
runApp()
install.packages(roxygen2)
install.packages("roxygen2")
devtools::create("RTQ_analysis")
devtools::create("quicR")
here::dr_here()
devtools::create("quicR")
install.packages(c("ggforce", "ggrepel", "ggridges", "googledrive", "googlesheets4", "knitr", "openxlsx", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "shiny"))
setwd("~/Work/RTQ_analysis/R")
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
Sys.setenv(PATH = paste("C:/Rtools/bin", Sys.getenv("PATH"), sep=";"))
Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")
devtools::document()
devtools::document()
devtools::document()
?calculate_MPR
?read.csv
?na.omit
?devtools::check
?slice
devtools::document()
?calculate_MS
?na.omit
?cell_cols
?unite
?rename
?replace_na
?vars
?separate
setwd("C:/Users/gage1/Box/MNPRO/RT-QuIC/RT-QuIC Data/Gage's RT-QuIC Runs/2024/20240814_r9_GR_swabs_12-22_Nano")
source("~/Work/RTQ_analysis/plate_view_export.R", echo=TRUE)
View(df_meta)
df <- data.frame(df_list[[df_id]])
View(df)
# Specify the time column.
time_col <- df[, 1]
# Remove the time column and ID row.
df <- df[, -1]
# Set the time column as the df index.
rownames(df) <- time_col
# Get the wells used in the run.
wells <- get_wells(file)
View(wells)
# Take the metadata and apply it into a dataframe for the plate_view function.
sample_locations <- na.omit(do.call(rbind, Map(data.frame, A=wells, B=ID_list)))
View(sample_locations)
# Add the dilutions if applicable.
if (dilution_bool) {
sample_locations <- sample_locations %>%
mutate(Dilutions = -log10(as.numeric(dilutions))) %>%
unite(B, B:Dilutions, sep="\n")
}
View(sample_locations)
View(wells)
?plate_view
source("~/Work/RTQ_analysis/plate_view_export.R", echo=TRUE)
usethis::use_testthat(3)
setwd("~/Work/RTQ_analysis/tests")
library(testthat)
library(usethis)
use_r("BMG_format")
2*2, 4
test_that("BMG_format works", {
2*2, 4
test_that("BMG_format works", {
expect_equal(2*2, 4)
})
?expect_output_file
test_that("BMG_format works", {
expect_output_file(
BMG_format("BMG_formatting/plate_layout.csv"),
"BMG_formatting/formatted.txt"
)
})
test_that("BMG_format works", {
expect_known_output(
BMG_format("BMG_formatting/plate_layout.csv"),
"BMG_formatting/formatted.txt"
)
})
use_r("BMG_format")
test_that("BMG_format works", {
expect_known_output(
BMG_format("BMG_formatting/plate_layout.csv"),
"BMG_formatting/formatted.txt"
)
})
library(quicR)
test_that("BMG_format works", {
expect_known_output(
BMG_format("BMG_formatting/plate_layout.csv"),
"BMG_formatting/formatted.txt"
)
})
expect_known_output(
BMG_format("testthat/BMG_formatting/plate_layout.csv"),
"testthat/BMG_formatting/formatted.txt"
)
expect_snapshot_output(
BMG_format("testthat/BMG_formatting/plate_layout.csv"),
"testthat/BMG_formatting/formatted.txt"
)
expect_snapshot_output(
BMG_format("testthat/BMG_formatting/plate_layout.csv"),
"BMG_formatting/formatted.txt"
)
expect_snapshot_output(
BMG_format("BMG_formatting/plate_layout.csv"),
"BMG_formatting/formatted.txt"
)
test_that("BMG_format works", {
expect_snapshot_output(
BMG_format("BMG formatting/plate_layout.csv"),
"BMG formatting/formatted.txt"
)
})
test_that("BMG_format works", {
expect_snapshot_output(
BMG_format("testthat/BMG formatting/plate_layout.csv"),
"testthat/BMG formatting/formatted.txt"
)
})
?expect_snapshot_output
?expect_type
expect_type(
BMG_format("testthat/BMG formatting/plate_layout.csv"),
"string"
)
expect_type(
BMG_format("BMG formatting/plate_layout.csv"),
"character"
)
test_that("BMG_format returns character string. ", {
expect_type(
BMG_format("testthat/BMG formatting/plate_layout.csv"),
"character"
)
})
expect_equal(
BMG_format("testthat/BMG formatting/plate_layout.csv"),
read.delim("testthat/BMG formatting/formatted.txt")
)
read.delim("testthat/BMG formatting/formatted.txt")
b <- read.delim("testthat/BMG formatting/formatted.txt")
a <- BMG_format("testthat/BMG formatting/plate_layout.csv")
View(b)
?read.delim
b <- read.delim("testthat/BMG formatting/formatted.txt",
header = FALSE)
View(b)
b <- list(read.delim("testthat/BMG formatting/formatted.txt",
header = FALSE))
type(a)
class(a)
class(b)
b <- read.delim("testthat/BMG formatting/formatted.txt",
header = FALSE)
class(b)
a <- as.data.frame(BMG_format("testthat/BMG formatting/plate_layout.csv"))
View(a)
View(b)
View(a)
a <- as.data.frame(V1 = BMG_format("testthat/BMG formatting/plate_layout.csv"))
a <- as.data.frame("V1" = BMG_format("testthat/BMG formatting/plate_layout.csv"))
b <- read.delim("testthat/BMG formatting/formatted.txt",
header = T)
View(b)
expect_equal(
as.data.frame(BMG_format("testthat/BMG formatting/plate_layout.csv")),
read.delim("testthat/BMG formatting/formatted.txt")
)
expect_equal(
as.data.frame(BMG_format("testthat/BMG formatting/plate_layout.csv")),
read.delim("testthat/BMG formatting/formatted.txt",
header = FALSE)
)
?readChar
b <- read.delim("testthat/BMG formatting/formatted.txt", 1)
b <- readChar("testthat/BMG formatting/formatted.txt", 1)
b <- readChar("testthat/BMG formatting/formatted.txt")
a <- BMG_format("testthat/BMG formatting/plate_layout.csv")
b <- readChar("testthat/BMG formatting/formatted.txt", 96)
view(a)
a
b <- read.delim("testthat/BMG formatting/formatted.txt", header = FALSE
)
View(b)
a <- c(V1 = BMG_format("testthat/BMG formatting/plate_layout.csv"))
a <- c(BMG_format("testthat/BMG formatting/plate_layout.csv"))
a <- data.frame(BMG_format("testthat/BMG formatting/plate_layout.csv"))
View(a)
a <- data.frame(V1 = BMG_format("testthat/BMG formatting/plate_layout.csv"))
b <- read.delim("testthat/BMG formatting/formatted.txt", header = FALSE
)
View(a)
View(b)
test_that("BMG_format output matches formatted file.", {
expect_equal(
data.frame(V1 = BMG_format("testthat/BMG formatting/plate_layout.csv")),
read.delim("testthat/BMG formatting/formatted.txt", header = FALSE)
)
})
test_file <- "testthat/BMG formatting/plate_layout.csv"
ref_file <- "testthat/BMG formatting/formatted.txt"
use_test("test_BMG_format")
?use_test
library(testthat)
library(testthat)
library(usethis)
library(quicR)
use_r("get_real")
for (file in list.files("input files")) {
print(file)
}
library(readxl)
for (file in list.files("input files", full.names = TRUE)) {
data <- read_xlsx(file, sheet = 2)
test_that(
"get_real returns a list of dataframes?",
{get_real(data)}
)
}
test_that(
"get_real returns a list of dataframes?",
{expect_type(
get_real(data),
"lists"
)}
)
test_that(
"get_real returns a list of dataframes?",
{expect_type(
get_real(file),
"lists"
)}
)
for (file in list.files("input files", full.names = TRUE)) {
data <- read_xlsx(file, sheet = 2)
test_that(
"get_real returns a list of dataframes?",
{expect_type(
get_real(file),
"lists"
)}
)
}
for (file in list.files("input files", full.names = TRUE)) {
data <- read_xlsx(file, sheet = 2)
test_that(
"get_real returns a list of dataframes?",
{expect_type(
get_real(file),
"lists"
)}
)
}
for (file in list.files("input files", full.names = TRUE)) {
data <- read_xlsx(file, sheet = 2)
test_that(
"get_real returns a list of dataframes?",
{expect_type(
get_real(file),
"list"
)}
)
}
files <- list.files("input files", full.names = TRUE)
setwd("~/Work/RTQ_analysis/tests/testthat")
files <- list.files("input files", full.names = TRUE)
file <- files[1]
test_that(
"get_real returns list of dataframes?",
{expect_type(
get_real(data)[1],
"dataframe"
)}
)
data <- read_xlsx(file, sheet = 2)
test_that(
"get_real returns list of dataframes?",
{expect_type(
get_real(data)[1],
"dataframe"
)}
)
test_that(
"get_real returns list of dataframes?",
{expect_type(
get_real(data)[[1]],
"dataframe"
)}
)
test_that(
"get_real returns a list?",
{expect_type(
get_real(data),
"list"
)}
)
?read_excel
df_list <- get_real(files[1])
View(df_list)
df_list <- get_real(files[[1]])
df_list <- get_real(files[1])[[1]]
?expect_true
test_that(
"get_real returns list of dataframes?",
{expect_true(
is.dataframe(get_real(data)[[1]])
)}
)
?is.data.frame
test_that(
"get_real returns list of dataframes?",
{expect_true(
is.data.frame(get_real(data)[[1]])
)}
)
?expect_success
